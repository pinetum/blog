<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Qtlin</title>
    <link>/posts/</link>
    <description>Recent content in Posts on Qtlin</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-TW</language>
    <lastBuildDate>Sat, 01 Sep 2018 09:09:31 +0800</lastBuildDate><atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用Virtualbox對外接USB硬碟中的Windows10開機</title>
      <link>/posts/virtualbox-boot-win10-from-usb/</link>
      <pubDate>Sat, 01 Sep 2018 09:09:31 +0800</pubDate>
      
      <guid>/posts/virtualbox-boot-win10-from-usb/</guid>
      <description> 準備事項：
 Mac一台 usb外接硬碟（建議SSD） 安裝好Virtualbox 基本的termainal操作  建立USB外接硬碟的vmdk檔案 開啟磁碟工具程式將外接硬碟的所有磁區卸除(unmount) 卸除後磁碟會以灰色字顯示 開啟terminal並輸入diskutil list找到自己的外接硬碟代號
/dev/disk4 (external, physical): #: TYPE NAME SIZE IDENTIFIER 0: FDisk_partition_scheme *250.1 GB disk4 1: Windows_NTFS 系統保留 575.7 MB disk4s1 2: Windows_NTFS BOOTCAMP 249.5 GB disk4s2 根據自己的硬碟代號建立vmdk檔案使用terminal輸入指令
sudo VBoxManage internalcommands createrawvmdk -filename ~/VirtualBox\ VMs/disk4.vmdk -rawdisk /dev/disk4 其中/dev/disk4請替換成自己的硬碟代號，~/VirtualBox\ VMs/disk4.vmdk替換成vmdk檔案要放置的路徑
將磁碟與vmdk檔案權限改為777
sudo chmod 777 ~/VirtualBox\ VMs/disk4.vmdk sudo chmod 777 /dev/disk4 於Virtualbox建立虛擬機  輸入名稱 選擇作業系統類型與版本 調整記憶體大小 硬碟指定為使用現有虛擬硬碟檔案將檔案選為剛剛產生的vmdk檔案  接著就可以對虛擬機開機，就可以直接對外接硬碟開機並使用 若外接硬碟為空的，尚未安裝Windows可以直接透過Virtualbox安裝（插入windows 10安裝ISO檔）</description>
    </item>
    
    <item>
      <title>使用Mosquitto作為MQTT broker並支援websockets連線</title>
      <link>/posts/mqtt-with-websocket-mosquitto/</link>
      <pubDate>Wed, 18 Apr 2018 20:35:40 +0800</pubDate>
      
      <guid>/posts/mqtt-with-websocket-mosquitto/</guid>
      <description>安裝 mosquitto  brew install mosquitto
 啟動服務  brew services start mosquitto
編輯/usr/local/etc/mosquitto/mosquitto.conf
# 原本mqtt broker的port listener 1883 protocol mqtt # 使用1884作為websockets使用的port listener 1884 protocol websockets  重新啟動服務  brew services restart mosquitto</description>
    </item>
    
    <item>
      <title>於macOS上建立MT7697開發環境（使用GCC）</title>
      <link>/posts/mt7697-gcc-on-macos/</link>
      <pubDate>Wed, 04 Oct 2017 19:11:31 +0800</pubDate>
      
      <guid>/posts/mt7697-gcc-on-macos/</guid>
      <description>因緣際會獲得了Linkit 7697 HDK 開發版，但官方僅針對windows與Ubuntu提供SDK，如果想在macOS上開發需要對官方的SDK加一點料。
本文大綱  下載官方SDK 下載GNU Arm Embedded Toolchain for macOS 將SDK中的Toolchain替換成macOS版本 下載Flash tool 修改Makefile支援燒錄 開發流程  下載官方SDK 最新版本的SDK可於下方連結下載，目前最新版本為4.6.0 https://docs.labs.mediatek.com/resource/mt7687-mt7697/zh_tw/downloads
下載GNU Arm Embedded Toolchain for macOS 我使用的版本為 4.8.3-2014q1
https://developer.arm.com/open-source/gnu-toolchain/gnu-rm/downloads
替換Toolchain 於官方下載的SDK中所附的Toolchain為給Ubuntu使用，需要使用macOS版本的Toolchain覆蓋
將官方SDK與toolchain解壓縮
toolchain解壓縮後會有以下資料夾，將LinkIt_SDK_V4.6.0_public/tools/gcc/gcc-arm-none-eabi資料夾中內容清空，並使用新下載的內容替換
arm-none-eabi bin lib share 下載Flash tool cd path/to/LinkIt_SDK_V4.6.0_public/tools git clone https://github.com/MediaTek-Labs/mt76x7-uploader flash_tool 修改Makefile支援燒錄 於專案下的GCC資料夾中的Makefile增加flash，往後僅需要make flash即可燒錄並開啟serial port
flash: $(SOURCE_DIR)/tools/flash/upload.py -c /dev/cu.SLAB_USBtoUART -n $(SOURCE_DIR)/tools/flash//da97.bin -f $(OUTPATH)/$(PROJ_NAME).bin screen /dev/tty.SLAB_USBtoUART 115200 開發流程  新建專案  cd path/to/LinkIt_SDK_V4.6.0_public/project/linkit7697_hdk/templates/ cp -r freertos_initialize_main_features .</description>
    </item>
    
    <item>
      <title>安裝 OpenConnect VPN Serve(ocserv) 於 raspberry pi</title>
      <link>/posts/ocserv-on-rpi/</link>
      <pubDate>Mon, 05 Jun 2017 00:38:14 +0800</pubDate>
      
      <guid>/posts/ocserv-on-rpi/</guid>
      <description>安裝相依套件
apt-get install make liblz4-dev libseccomp-dev libreadline-dev libnl-route-3-dev libkrb5-dev libprotobuf-c0-dev libtalloc-dev libgnutls28-dev libwrap0-dev libpam0g-dev libhttp-parser-dev libpcl1-dev libopts25-dev autogen protobuf-c-compiler gperf liblockfile-bin nuttcp texinfo libev4 libev-devel 編譯libtasn1
wget http://ftp.gnu.org/gnu/libtasn1/libtasn1-4.7.tar.gz tar zxf libtasn1*.gz &amp;amp;&amp;amp; cd libtasn1* ./configure make make install 編譯ocserv
wget ftp://ftp.infradead.org/pub/ocserv/ocserv-0.11.8.tar.xz tar xvf ocserv-0.11.8.tar.xz cd ocserv-0.11.8 ./configure --disable-seccomp make make install 新建ocserv資料夾，並加入config檔案
mkdir -p /etc/ocserv cp doc/ocserv/doc/sample.config /etc/ocserv/ocserv.config 參數檔範例：
auth = &amp;quot;plain[passwd=/etc/ocserv/ocpasswd]&amp;quot; tcp-port = 443 udp-port = 443 run-as-user = nobody run-as-group = daemon socket-file = /var/run/ocserv-socket server-cert = /etc/ocserv/certificate.</description>
    </item>
    
    <item>
      <title>給程式人專用的字型 Firacode</title>
      <link>/posts/firacode-ligatures-font/</link>
      <pubDate>Thu, 27 Apr 2017 21:25:06 +0800</pubDate>
      
      <guid>/posts/firacode-ligatures-font/</guid>
      <description>=&amp;gt; &amp;gt;= &amp;lt;= === !== != --&amp;gt; &amp;gt;-&amp;gt; ~~&amp;gt; &amp;lt;&amp;gt; &amp;lt;| |&amp;gt; 10x10 *** #{ #_( &amp;lt;$ Firacode 專門為程式碼所設計的連字字體 等寬字體 vs. 比例字體 目前大部分的編輯器與IDE幾乎都支援Ligature font，只要下載字體安裝到系統中並將編輯器字體調整即可，少數編輯器有較特別的設定方式，可以參考官方的support list &amp;amp; instructions
以VS code為例，因為設定部分目前沒有GUI畫面可以使用，需要修改setting.json設定檔（透過Code-&amp;gt;Perfence-&amp;gt;Setting開啟 或是以快捷鍵⌘ + ,）
{ ... &amp;#34;editor.fontFamily&amp;#34;: &amp;#34;Fira Code&amp;#34;, &amp;#34;editor.fontLigatures&amp;#34;: true, &amp;#34;editor.fontSize&amp;#34;: 14, ... } </description>
    </item>
    
    <item>
      <title>PFU HHKB Pro 2 墨色 無刻</title>
      <link>/posts/hhkb-pro2/</link>
      <pubDate>Sun, 23 Apr 2017 01:07:32 +0800</pubDate>
      
      <guid>/posts/hhkb-pro2/</guid>
      <description>心中一直有一個願望
擁有一支好打、順手的鍵盤，但又不想一把換過一把，掉入鍵盤坑裡。 據說去年中就已經開始可以在Amazon訂貨，不用透過代買，直接寄送到台灣，這是一件多麽方便的事情啊！！
所以不小心就按下了訂購按鈕&amp;hellip;&amp;hellip; 如何在Macbook上使用得順手 第一步當然是直接把鍵盤架在原本的鍵盤上！ 不過這樣放下去以後，常常會壓到原本內建鍵盤的按鍵，所以我們需要使用Karabiner設定在插入外接鍵盤時，停用內建鍵盤
但是Karabiner目前並不支援MacOS 10.12，而MacOS 10.12的使用者需要改用Karabiner-Elements，可以直接下載最新版本
下載安裝後開啟Preference&amp;hellip;，將Disable the built-in keyboard while selected devices is connected.開啟，並把hhkb打勾以後，使用hhkb時內建鍵盤就會失效。（但是電源鍵似乎無解） 後記 如果有人跟我一樣買無刻，會發現其實前幾天使用其實是需要看看layout的，因為與傳統鍵盤有些許不同 或許你會需要這張高畫質的圖片 圖片來源</description>
    </item>
    
    <item>
      <title>使用hugo建立靜態的blog</title>
      <link>/posts/create-blog-with-hugo/</link>
      <pubDate>Sun, 23 Apr 2017 00:22:30 +0800</pubDate>
      
      <guid>/posts/create-blog-with-hugo/</guid>
      <description>Hugo := markdown files-&amp;raquo;static html web site
Hugo  快速+現代的網站引擎 跨平台 使用golang撰寫 開源而且免費 根據自己的作業系統下載編譯好的可執行檔  優點：
 據說很快！（等文章多了以後再回來研究是有多快, 呵呵） 搭配github page使用無限流量，省去維護主機的成本 不用擔心部落格供應商倒閉 功能不夠可以自己fork增加或修改 比較不用擔心網站被打下來（？） 官方有很完整的user guide可以參考  缺點：
 寫完文章後要自己把靜態網頁上傳到主機上（例如push到github上） 無法輕易的對圖片做排版 使用Markdown，對於一般使用者有一定的門檻 需要自己找放置靜態網頁的地方   網站掛了不能找客服嘴砲
安裝 使用brew可以快速的在macOS上安裝
$ brew update &amp;amp;&amp;amp; brew install hugo 基本指令 懶人就只要記這些啦ob&#39;_&amp;lsquo;ov
# 建立新的網站 $ hugo new site bookshelf # 建立新頁面 $ hugo new about.md # 建立新文章（部落格使用時） $ hugo new post/hello-world.md # 建立Server可以使用瀏覽器預覽，於修改markdown檔案時會自動重新整理網頁 $ hugo server # 產生靜態html檔案到public資料夾內 $ hugo Themes 想要潮一點，請到Hugo Themes Site挑一個順眼的主題來安裝，基本上主題的簡介都會有安裝的流程說明，將主題下載後放到hugo目錄下的themes目錄，並根據所選主題修改config.</description>
    </item>
    
  </channel>
</rss>
